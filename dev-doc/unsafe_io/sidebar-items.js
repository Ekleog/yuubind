initSidebarItems({"mod":[["os","OS-specific functionality."]],"struct":[["ReadHalf","Adapt an `AsUnsafeReadWriteHandle` implementation to implement `AsUnsafeHandle` with the read handle."],["UnsafeFile","A non-owning unsafe I/O handle which on Windows is limited to handling what Windows considers to be `RawHandle`s—mainly files and pipes."],["UnsafeHandle","A non-owning unsafe I/O handle."],["UnsafeReadable","A non-owning unsafe I/O handle that implements [`Read`]. `Read` functions are considered safe, so this type requires `unsafe` to construct."],["UnsafeSocket","A non-owning unsafe I/O handle which on Windows is limited to handling what Windows considers to be `RawSocket`s—mainly TCP streams and listeners and UDP sockets."],["UnsafeWriteable","A non-owning unsafe I/O handle that implements [`Write`]. `Write` functions considered are safe, so this type requires `unsafe` to construct."],["View","A non-owning view of a resource which dereferences to a `&Target` or `&mut Target`."],["WriteHalf","Adapt an `AsUnsafeReadWriteHandle` implementation to implement `AsUnsafeHandle` with the write handle."]],"trait":[["AsUnsafeFile","A trait for types which contain an unsafe file and can expose it."],["AsUnsafeHandle","A trait for types which contain an unsafe handle and can expose it."],["AsUnsafeReadWriteHandle","Like [`AsUnsafeHandle`], but for types which may have one or two handles, for reading and writing."],["AsUnsafeSocket","A trait for types which contain an unsafe socket and can expose it."],["FromUnsafeFile","A trait for types which can be constructed from unsafe files."],["FromUnsafeHandle","A trait for types which can be constructed from an unsafe handle."],["FromUnsafeSocket","A trait for types which can be constructed from unsafe sockets."],["IntoUnsafeFile","A trait for types which can be converted into unsafe files."],["IntoUnsafeHandle","A trait for types which can be converted into an unsafe handle."],["IntoUnsafeSocket","A trait for types which can be converted into unsafe sockets."],["OwnsRaw","Assert that a type owns its raw file descriptor or handle."]]});